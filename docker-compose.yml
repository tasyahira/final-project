version: '3'
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.3.0
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
    - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__LOGGING_LEVEL=INFO
  volumes:
    - ./dags:/opt/airflow/dags
    - ./source:/opt/airflow/source
    - ./output:/opt/airflow/output
    - ./airflow-data/logs:/opt/airflow/logs
    - ./airflow-data/plugins:/opt/airflow/plugin
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    - postgres
    - mysql

services:
  db:
    image: "postgres:12"
    ports:
      - "5433:5432"
    # volumes:
    #   - ./pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=digitalSkola
      - POSTGRES_PASSWORD=digitalSkola
      - POSTGRES_DB=final_project_postgres

  mysql:
    restart: always
    image: mysql:8
    container_name: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 'root'
      MYSQL_DATABASE: 'final_project'
      MYSQL_USER: 'digitalSkola'
      MYSQL_PASSWORD: 'digitalSkola'
      # MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    # volumes:
      # - db:/var/lib/mysql
      # - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  postgres:
    image: postgres:12
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=airflow
      - POSTGRES_PORT=5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
    ports:
      - "5432:5432"

  airflow-init:
    << : *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - airflow users list || ( airflow db init &&
        airflow users create
          --role Admin
          --username airflow
          --password airflow
          --email airflow@airflow.com
          --firstname airflow
          --lastname airflow )
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    << : *airflow-common
    command: airflow webserver
    ports:
      - 8080:8080
    container_name: airflow_webserver
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  airflow-scheduler:
    << : *airflow-common
    command: airflow scheduler
    container_name: airflow_scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

volumes:
  postgres-db-volume:

